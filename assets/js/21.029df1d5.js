(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{422:function(t,e,o){"use strict";o.r(e);var a=o(43),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"javascript基础"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#javascript基础"}},[t._v("#")]),t._v(" JavaScript基础")]),t._v(" "),o("p",[t._v("ECMAScript 和 JavaScript，前者是后者的规范，后者是前者的实现，类似于Unicode和UTF系列的关系")]),t._v(" "),o("h4",{attrs:{id:"typeof为什么对null错误的显示"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#typeof为什么对null错误的显示"}},[t._v("#")]),t._v(" typeof为什么对null错误的显示")]),t._v(" "),o("p",[t._v("因为JS最初是在32位的操作系统上运行（小端模式？），为了性能考虑，使用的是低位存储变量的类型信息，000代表的是对象，但是null是全0，所以也会被 typeof 当作 object 类型。")]),t._v(" "),o("h4",{attrs:{id:"typeof-abc-和-typeof-abc-都是-string-那么-typeof-是操作符还是函数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#typeof-abc-和-typeof-abc-都是-string-那么-typeof-是操作符还是函数"}},[t._v("#")]),t._v(" typeof('abc')和 typeof 'abc'都是 string, 那么 typeof 是操作符还是函数？")]),t._v(" "),o("p",[o("code",[t._v("typeof(typeof)")]),t._v(" 会抛出错误，如果typeof是函数则理应返回function。")]),t._v(" "),o("p",[t._v("所以括号只是用来分组，typeof是操作符，而不是个函数。")]),t._v(" "),o("h4",{attrs:{id:"查询某个对象是否有某个属性的方法"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#查询某个对象是否有某个属性的方法"}},[t._v("#")]),t._v(" 查询某个对象是否有某个属性的方法")]),t._v(" "),o("p",[t._v("属性的分类")]),t._v(" "),o("ul",[o("li",[t._v("自身的可枚举属性、不可枚举属性、Symbol 键")]),t._v(" "),o("li",[t._v("继承的可枚举属性、不可枚举属性、Symbol 键")])]),t._v(" "),o("p",[o("code",[t._v("obj.key")]),t._v(" 直接用属性判断是否为undefined")]),t._v(" "),o("p",[o("code",[t._v("in")]),t._v(" 操作符可以判断以上情况的全部属性")]),t._v(" "),o("p",[o("code",[t._v("for...in")]),t._v(" 遍历自身的和继承的可枚举属性，不包含symbol键")]),t._v(" "),o("p",[o("code",[t._v("Object.keys")]),t._v(" 仅包含自身的可枚举属性，不包含symbol键")]),t._v(" "),o("p",[o("code",[t._v("Object.getOwnPropertyNames")]),t._v(" 包含自身的可枚举属性与不可枚举属性（除symbol键外的所有自身属性）")]),t._v(" "),o("p",[o("code",[t._v("obj.hasOwnProperty()")]),t._v(" 和 "),o("code",[t._v("Object.hasOwn()")]),t._v(" 用于判断所有的自身属性，包含symbol键")]),t._v(" "),o("p",[o("code",[t._v("obj.propertyIsEnumerable()")]),t._v(" 用于判断自身的可枚举属性和symbol键")]),t._v(" "),o("p",[o("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#%E7%BB%9F%E8%AE%A1%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("属性的可枚举性和所有权"),o("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=r.exports}}]);