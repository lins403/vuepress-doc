(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{485:function(t,a,r){"use strict";r.r(a);var v=r(43),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"内存管理与垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存管理与垃圾回收"}},[t._v("#")]),t._v(" 内存管理与垃圾回收")]),t._v(" "),r("blockquote",[r("p",[t._v("JavaScript 是使用垃圾回收的编程语言，开发者不需要操心内存分配和回收")])]),t._v(" "),r("h2",{attrs:{id:"内存管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),r("h3",{attrs:{id:"栈内存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈内存"}},[t._v("#")]),t._v(" 栈内存")]),t._v(" "),r("ul",[r("li",[t._v("原始值（String、Number、Boolean、null、undefined、Symbol），大小固定")])]),t._v(" "),r("h3",{attrs:{id:"堆内存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆内存"}},[t._v("#")]),t._v(" 堆内存")]),t._v(" "),r("ul",[r("li",[t._v("引用值")]),t._v(" "),r("li",[t._v("闭包中的变量")])]),t._v(" "),r("h3",{attrs:{id:"内存泄漏"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[t._v("#")]),t._v(" 内存泄漏")]),t._v(" "),r("ul",[r("li",[t._v("全局变量")]),t._v(" "),r("li",[t._v("定时器（setInterval）")]),t._v(" "),r("li",[t._v("闭包")])]),t._v(" "),r("h2",{attrs:{id:"垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),r("h4",{attrs:{id:"内存生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存生命周期"}},[t._v("#")]),t._v(" 内存生命周期")]),t._v(" "),r("ol",[r("li",[t._v("内存分配")]),t._v(" "),r("li",[t._v("使用内存")]),t._v(" "),r("li",[t._v("释放内存\n"),r("ul",[r("li",[t._v("JavaScript通过 "),r("mark",[t._v("自动内存管理")]),t._v(" 实现内存分配和闲置资源回收")])])])]),t._v(" "),r("h3",{attrs:{id:"回收策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#回收策略"}},[t._v("#")]),t._v(" 回收策略")]),t._v(" "),r("p",[t._v("基本思路是，确定哪个变量不会再使用，然后释放它占用的内存。")]),t._v(" "),r("p",[t._v("这个过程是周期性的，即垃圾回收程序每隔一定时间(或者说在代码执 行过程中某个预定的收集时间)就会自动运行。")]),t._v(" "),r("h4",{attrs:{id:"特殊"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特殊"}},[t._v("#")]),t._v(" 特殊")]),t._v(" "),r("ul",[r("li",[t._v("全局变量\n"),r("ul",[r("li",[t._v("全局上下文在应用程序退出前才会被销毁，比如关闭网页或退出浏览器；在这之前，上下文的变量对象中的变量，即全局变量，不会被当成垃圾回收")])])]),t._v(" "),r("li",[t._v("闭包中的变量\n"),r("ul",[r("li",[t._v("闭包中的变量并不保存中栈内存中，而是保存在堆内存中")])])])]),t._v(" "),r("h3",{attrs:{id:"标记策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标记策略"}},[t._v("#")]),t._v(" 标记策略")]),t._v(" "),r("ol",[r("li",[r("code",[t._v("引用计数")]),t._v(" (reference counting)\n"),r("ul",[r("li",[t._v("垃圾回收程序下次运行的时候就会释放引用数为 0 的值的内存")]),t._v(" "),r("li",[t._v("不能解决循环引用的问题（objectA 和 objectB 通过各自的属性相互引用），可能导致内存泄漏")])])]),t._v(" "),r("li",[r("code",[t._v("标记清理")]),t._v(" (mark-and-sweep)\n"),r("ul",[r("li",[t._v("最常用的垃圾回收策略，先给当前不使用的值加上标记，再回来回收它们的内存")]),t._v(" "),r("li",[t._v("垃圾回收程序会在运行的时候，给存储在内存中的所有变量都加上标记，从根部出发将能触及到的对象的标记清除（将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉），销毁那些带标记的值（因为任何在上下文中的变量都访问不到它们了），并回收它们所占用的内存空间。")])])])]),t._v(" "),r("h3",{attrs:{id:"性能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("对浏览器而言，调度垃圾回收程序方面的问题会导致性能下降")])]),t._v(" "),r("li",[r("p",[t._v("对开发者而言，理论上如果能够合理使用分配的内存，同时避免多余的垃圾回收，那就可以保住因释放内存而损失的性能")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("赋值 "),r("code",[t._v("null")]),t._v("，解除对象的引用。")]),t._v(" "),r("ul",[r("li",[t._v("为促进内存回收，全局对象、全局对象的属性和循环引用都应该在不需要时解除引用")])])]),t._v(" "),r("li",[r("p",[t._v("静态分配（内存）策略")])])])])]),t._v(" "),r("h2",{attrs:{id:"todo"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[t._v("#")]),t._v(" TODO")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/raxxarr/note/issues/3",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么闭包不会被垃圾回收清除 · Issue #3 · raxxarr/note · GitHub"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6844903869525262349",target:"_blank",rel:"noopener noreferrer"}},[t._v("「前端进阶」JS中的内存管理"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://juejin.cn/post/6854573211716321287#heading-3",target:"_blank",rel:"noopener noreferrer"}},[t._v("js的垃圾回收机制"),r("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);