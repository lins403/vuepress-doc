(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{482:function(t,a,v){"use strict";v.r(a);var s=v(43),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"数据结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://raw.githubusercontent.com/lins403/assetsSpace/master/vuepress/img/data_structure.png",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("逻辑结构：描述数据元素之间的逻辑关系，是从具体问题抽象出来的数学模型。")]),t._v(" "),v("li",[t._v("物理 / 存储结构：数据元素及其元素在计算机存储器中的结构（存储方式）")])]),t._v(" "),v("p",[t._v("逻辑结构是数据结构的抽象，存储结构是数据结构的实现（映像），综合起来建立了数据元素之间的结构关系")]),t._v(" "),v("h2",{attrs:{id:"逻辑结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#逻辑结构"}},[t._v("#")]),t._v(" 逻辑结构")]),t._v(" "),v("p",[t._v("两种划分方式：")]),t._v(" "),v("h4",{attrs:{id:"方式一"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方式一"}},[t._v("#")]),t._v(" 方式一")]),t._v(" "),v("ul",[v("li",[t._v("线性结构\n"),v("ul",[v("li",[t._v("所有节点都最多只有一个直接前趋和一个直接后继")]),t._v(" "),v("li",[t._v("线性表、栈和队列、串、数组和广义表")])])]),t._v(" "),v("li",[t._v("非线性结构\n"),v("ul",[v("li",[t._v("树、图")])])])]),t._v(" "),v("h4",{attrs:{id:"方式二"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方式二"}},[t._v("#")]),t._v(" 方式二")]),t._v(" "),v("ul",[v("li",[t._v("集合结构：结构中的数据元素除了同属一个集合外，无任何其它关系")]),t._v(" "),v("li",[t._v("线性结构：一对一的线性关系")]),t._v(" "),v("li",[t._v("树形结构：一对多的层次关系")]),t._v(" "),v("li",[t._v("图状结构/网状结构：多对多的任意关系")])]),t._v(" "),v("h2",{attrs:{id:"存储结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#存储结构"}},[t._v("#")]),t._v(" 存储结构")]),t._v(" "),v("ul",[v("li",[t._v("顺序存储结构\n"),v("ul",[v("li",[t._v("连续的存储单元、依次存储，数据元素之间的逻辑关系由 "),v("u",[t._v("存储位置")]),t._v(" 来表示")])])]),t._v(" "),v("li",[t._v("链式存储结构\n"),v("ul",[v("li",[t._v("任意的存储单元，逻辑关系由 "),v("u",[t._v("指针")]),t._v(" 来表示")])])]),t._v(" "),v("li",[t._v("索引存储结构\n"),v("ul",[v("li",[t._v("建立附加的索引表")])])]),t._v(" "),v("li",[t._v("散列存储结构\n"),v("ul",[v("li",[t._v("根据结点的关键字直接计算出该结点的存储地址")])])])]),t._v(" "),v("h2",{attrs:{id:"抽象数据类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型"}},[t._v("#")]),t._v(" 抽象数据类型")]),t._v(" "),v("p",[t._v("抽象数据类型（Abstract Data Type，ADT）是将数据对象、数据对象之间的关系和数据对象的基本操作封装在一起的一种表达方式。")]),t._v(" "),v("p",[t._v("抽象数据类型 = "),v("u",[t._v("数据的逻辑结构 + 抽象运算")]),t._v("（运算的功能描述）")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("// 抽象数据类型可以用以下的三元组来表示：\n\nADT抽象数据类型名{\n  数据对象：<数据对象的定义>\n  数据关系：<数据关系的定义>\n  基本操作：<基本操作的定义>\n} ADT抽象数据类型名\n")])])]),v("p",[t._v("实现方式")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("1. 用已有数据类型定义描述它的存储结构\n2. 用函数定义描述它的操作\n>>>然后就可以在程序中使用了\n")])])]),v("h1",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),v("p",[t._v("《2021王道数据结构》")])])}),[],!1,null,null,null);a.default=_.exports}}]);