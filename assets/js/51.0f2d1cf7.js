(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{452:function(t,a,e){"use strict";e.r(a);var r=e(43),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[t._v("#")]),t._v(" 浏览器")]),t._v(" "),e("h2",{attrs:{id:"bom和dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bom和dom"}},[t._v("#")]),t._v(" BOM和DOM")]),t._v(" "),e("ul",[e("li",[t._v("浏览器对象模型（Browser Object Model，简称 BOM），也就是 "),e("code",[t._v("window")]),t._v(" 对象")]),t._v(" "),e("li",[t._v("文档对象模型（Document Object Model，简称 DOM），也就是 "),e("code",[t._v("document")]),t._v(" 对象")])]),t._v(" "),e("h2",{attrs:{id:"浏览器分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器分析"}},[t._v("#")]),t._v(" 浏览器分析")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("navigator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("userAgent"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//用户代理")]),t._v("\n\n 浏览器\n 浏览器版本\n 浏览器渲染引擎\n "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("设备类型")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("桌面"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("移动"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n 设备生产商\n 设备型号\n 操作系统\n 操作系统版本\n\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("window"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("navigator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("platform"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("navigator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("deviceMemory"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("navigator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hardwareConcurrency"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("h2",{attrs:{id:"离线存储"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#离线存储"}},[t._v("#")]),t._v(" 离线存储")]),t._v(" "),e("h3",{attrs:{id:"localstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localstorage"}},[t._v("#")]),t._v(" localStorage")]),t._v(" "),e("ul",[e("li",[t._v("Chrome有5M大小限制")]),t._v(" "),e("li",[t._v("只支持字符串")])]),t._v(" "),e("h3",{attrs:{id:"indexeddb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb"}},[t._v("#")]),t._v(" indexedDB")]),t._v(" "),e("p",[t._v("Indexed Database API 简称 IndexedDB，是浏览器中存储"),e("u",[t._v("结构化数据")]),t._v("（也包括File/Blob）的一个方案。")]),t._v(" "),e("p",[t._v("IndexedDB 用于代替目前已废弃的 Web SQL Database API。")]),t._v(" "),e("p",[t._v("IndexedDB 背后的思想是创造一套 API，方便 JavaScript 对象的存储和获取，同时也支持查询和搜索。")]),t._v(" "),e("ul",[e("li",[t._v("实例："),e("a",{attrs:{href:"https://www.zhangxinxu.com/wordpress/2017/07/html5-indexeddb-js-example/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5 indexedDB前端本地存储数据库实例教程"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"其它"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Web SQL Database（已废弃）")])]),t._v(" "),e("li",[e("p",[t._v("CacheStorage（experimental）")])])]),t._v(" "),e("h3",{attrs:{id:"indexeddb-与-web-sql-database"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-与-web-sql-database"}},[t._v("#")]),t._v(" indexedDB 与 Web SQL Database")]),t._v(" "),e("p",[e("code",[t._v("Web SQL Database")])]),t._v(" "),e("ul",[e("li",[t._v("关系型数据库，类似SQLite")]),t._v(" "),e("li",[t._v("事务操作要写SQL")])]),t._v(" "),e("p",[e("code",[t._v("indexedDB")])]),t._v(" "),e("ul",[e("li",[t._v("NoSQL数据库，一个基于 JavaScript 的面向对象数据库")]),t._v(" "),e("li",[t._v("写法对JS开发者更友好，存储和检索通过键来索引")]),t._v(" "),e("li",[t._v("异步执行操作，以免阻塞应用程序")])]),t._v(" "),e("h3",{attrs:{id:"indexeddb-与-localstorage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexeddb-与-localstorage"}},[t._v("#")]),t._v(" indexedDB 与 localStorage")]),t._v(" "),e("ul",[e("li",[t._v("都是实现了客户端的离线存储，但是数据默认都没有加密，谨慎使用敏感信息")]),t._v(" "),e("li",[t._v("localStorage兼容IE8+，indexDB兼容IE10+")]),t._v(" "),e("li",[t._v("localStorage仅支持存储字符串，而indexDB几乎可以任何格式，包括图片的Blob数据（IE需要考虑兼容性）")]),t._v(" "),e("li",[t._v("indexDB可以在web workers 和 service workers中使用")]),t._v(" "),e("li",[t._v("使用 IndexedDB 执行的操作是异步执行的，而webStorage是同步阻塞的")])]),t._v(" "),e("h3",{attrs:{id:"localforage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localforage"}},[t._v("#")]),t._v(" localForage")]),t._v(" "),e("ul",[e("li",[t._v("根据浏览器的支持情况，依次选择 "),e("code",[t._v("IndexedDB")]),t._v(" | "),e("code",[t._v("WebSQL")]),t._v(" | "),e("code",[t._v("localStorage")]),t._v(" 其中一种进行存储数据")]),t._v(" "),e("li",[t._v("类似 localStorage 的API风格")]),t._v(" "),e("li",[t._v("异步get和set，支持Promise和callback")])]),t._v(" "),e("p",[e("a",{attrs:{href:"https://localforage.docschina.org/#localforage",target:"_blank",rel:"noopener noreferrer"}},[t._v("localForage 中文文档"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"渲染原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染原理"}},[t._v("#")]),t._v(" 渲染原理")]),t._v(" "),e("p",[t._v("The pixel pipeline:  "),e("u",[t._v("JavaScript > Style calculations > Layout > Paint > Composite")])]),t._v(" "),e("p",[t._v("像素管道：JavaScript » 样式计算 » 布局 » 绘制 » 合成")]),t._v(" "),e("p",[e("strong",[t._v("JavaScript")]),t._v("：使用 JavaScript 来实现一些视觉变化的效果")]),t._v(" "),e("p",[e("strong",[t._v("样式计算")]),t._v("：匹配selectors，应用css规则，计算每个元素的最终样式")]),t._v(" "),e("p",[e("strong",[t._v("布局")]),t._v("：计算它要占据的空间大小及其在屏幕的位置")]),t._v(" "),e("p",[e("strong",[t._v("绘制")]),t._v("：创建绘图调用的列表（a list of draw calls），填充像素（栅格化rasterize），绘制多个图层")]),t._v(" "),e("p",[e("strong",[t._v("合成")]),t._v("：合成多个图层")]),t._v(" "),e("p",[t._v("为了确保平滑滚动和动画，占据"),e("u",[e("strong",[t._v("主线程")])]),t._v("的所有内容，包括计算样式，以及reflow和paint，必须让浏览器在"),e("u",[e("strong",[t._v("60帧（16.67毫秒）")])]),t._v("内完成。为了确保重绘repaint的速度比初始绘制的速度更快，屏幕上的绘图通常被分解成数层。如果发生这种情况，则需要进行合成。")]),t._v(" "),e("p",[t._v("绘制可以将Layout tree中的元素分解为多个层。将内容提升到GPU上的层，可以提高绘制和重绘的性能。")]),t._v(" "),e("p",[t._v("渲染进程："),e("u",[t._v("主线程 (main thread)、合成线程 (compositor thread)")]),t._v("、栅格线程")]),t._v(" "),e("h2",{attrs:{id:"重排和重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重排和重绘"}},[t._v("#")]),t._v(" 重排和重绘")]),t._v(" "),e("h3",{attrs:{id:"重排reflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重排reflow"}},[t._v("#")]),t._v(" 重排reflow")]),t._v(" "),e("blockquote",[e("p",[e("em",[t._v("Reflow")]),t._v(" is any subsequent size and position determination of any part of the page or the entire document.")]),t._v(" "),e("p",[t._v("The first time the size and position of nodes are determined is called "),e("em",[t._v("layout")]),t._v(". Subsequent recalculations of node size and locations are called "),e("em",[t._v("reflows")]),t._v(".")])]),t._v(" "),e("p",[t._v("修改了元素的layout属性，影响到其它元素的布局，例如  width, height, position 等等")]),t._v(" "),e("p",[t._v("Recalculate Style--\x3eLayout--\x3eUpdate Layer Tree--\x3e以及之后各个流程")]),t._v(" "),e("h3",{attrs:{id:"重绘repaint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重绘repaint"}},[t._v("#")]),t._v(" 重绘repaint")]),t._v(" "),e("p",[t._v("修改了元素的“paint only”属性，不会影响到页面布局，例如 background, text color, shadows 等等，浏览器的渲染会掉过布局，直接进行绘制")]),t._v(" "),e("p",[t._v("Recalculate Style--\x3eUpdate Layer Tree--\x3e以及之后各个流程")]),t._v(" "),e("h3",{attrs:{id:"影响重排重绘的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#影响重排重绘的属性"}},[t._v("#")]),t._v(" 影响重排重绘的属性")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://goo.gl/lPVJY6",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS properties by style operation required - Google "),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"特殊"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特殊"}},[t._v("#")]),t._v(" 特殊")]),t._v(" "),e("blockquote",[e("p",[t._v("页面渲染的一般过程为"),e("code",[t._v("JS")]),t._v(" > "),e("code",[t._v("CSS")]),t._v(" > "),e("code",[t._v("计算样式")]),t._v(" > "),e("code",[t._v("布局")]),t._v(" > "),e("code",[t._v("绘制")]),t._v(" > "),e("code",[t._v("渲染层合并")]),t._v("。而在这个过程中，其中重排和重绘是整个环节中最为耗时的两环。从重绘和重排的概念上看，重排比重绘更加的消耗性能，所以我们尽量避免这两个环节。从性能方面考虑，最理想的渲染流水线是没有布局和绘制环节的，只需要做渲染层的合并即可。")])]),t._v(" "),e("ul",[e("li",[t._v("滚动")]),t._v(" "),e("li",[e("u",[t._v("opacity、transform")]),t._v("（通过transform实现的动画不需要进行样式计算、布局和绘制等操作）")])]),t._v(" "),e("p",[t._v("既不要布局也不要绘制，浏览器会跳过布局和绘制，直接执行合成")]),t._v(" "),e("h3",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("p",[t._v("重排和重绘都是占用浏览器主线程，主线程JavaScript的执行可能就会给页面的重排和重绘造成影响，造成下一帧的画面不能按时渲染， 例如导致动画卡顿")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我觉得有不少歧义，按MDN的解释加之我的理解，浏览器会解析css构建CSSOM，然后和DOM树一起合并（combined）生成render tree，随后执行layout布局，去遍历render tree，确定树中每个node的size和position，依照每个元素的盒模型属性进行排列，这样子才得到了Layout tree。")]),t._v(" "),e("p",[t._v("paint阶段就是将Layout tree上的每个box转换成页面上的实际像素。")]),t._v(" "),e("p",[t._v("而为了保证能在60帧内完成渲染，需要确保重绘的性能比原始绘制时高，paint阶段会将layout tree的元素取出分成多个图层，不同图层相互重叠的时候就要合成（composite），按照绘制顺序合成多个图层，然后展示到屏幕上。")]),t._v(" "),e("p",[t._v("把图层分块（tile），对每个块单独栅格化，填充像素到位图上，生成一帧，然后上传GPU。按MDN说的，图层当是将内容提升到GPU上的层。")]),t._v(" "),e("p",[e("code",[t._v("<canvas>")]),t._v(" 和 "),e("code",[t._v("<video>")]),t._v("，以及使用 "),e("code",[t._v("opacity")]),t._v(" 和 "),e("code",[t._v("transform")]),t._v(" 这些css属性的元素，可以实例化一个图层（instantiate a layer），这些元素和它们的后代节点，都会在这个图层上独立进行绘制，从而避开了主线程中的layout与paint环节。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work",target:"_blank",rel:"noopener noreferrer"}},[t._v("Populating the page: how browsers work"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("requestAnimationFrame我看到别的博客提到节流效果，用节流解释太妙了。")]),t._v(" "),e("h2",{attrs:{id:"技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#技巧"}},[t._v("#")]),t._v(" 技巧")]),t._v(" "),e("p",[e("code",[t._v("Cmd+Shft+R")]),t._v(" 无缓存重载页面")])])}),[],!1,null,null,null);a.default=s.exports}}]);