(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{439:function(t,a,r){"use strict";r.r(a);var s=r(43),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"概念梳理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概念梳理"}},[t._v("#")]),t._v(" 概念梳理")]),t._v(" "),r("h2",{attrs:{id:"数据驱动"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据驱动"}},[t._v("#")]),t._v(" 数据驱动")]),t._v(" "),r("p",[t._v("MVVM")]),t._v(" "),r("p",[t._v("组件的实例化和实例挂载")]),t._v(" "),r("p",[t._v("编译、渲染、挂载")]),t._v(" "),r("h2",{attrs:{id:"响应式原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[t._v("#")]),t._v(" 响应式原理")]),t._v(" "),r("p",[t._v("数据劫持，实现数据变化的观察者模式，也就是我们常说的依赖收集和派发更新，当被观察的数据发生变化时，就会触发收集的观察者即watcher里的处理方法")]),t._v(" "),r("p",[t._v("DOM异步更新机制")]),t._v(" "),r("h2",{attrs:{id:"组件化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),r("ul",[r("li",[t._v("组件实例挂载")]),t._v(" "),r("li",[t._v("组件更新与virtual DOM")]),t._v(" "),r("li",[t._v("merge options &合并策略")]),t._v(" "),r("li",[t._v("生命周期")]),t._v(" "),r("li",[t._v("组件注册、异步组件、动态组件、缓存组件")])])])}),[],!1,null,null,null);a.default=v.exports}}]);