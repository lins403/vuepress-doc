(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{563:function(t,n,e){"use strict";e.r(n);var s=e(43),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"入口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#入口"}},[t._v("#")]),t._v(" 入口")]),t._v(" "),e("h2",{attrs:{id:"vue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[t._v("#")]),t._v(" Vue")]),t._v(" "),e("p",[t._v("从 "),e("code",[t._v("npm run dev")]),t._v(" 开始，找到 "),e("code",[t._v("web/entry-runtime-with-compiler.js")]),t._v(" ，这里主要定义了 "),e("code",[t._v("Vue.prototype.$mount")]),t._v(" 和 "),e("code",[t._v("Vue.compile")]),t._v("，并默认导出Vue。")]),t._v(" "),e("p",[t._v("入口这里使用到的 Vue 构造函数，其实还经过了三层的封装，从后往前分别是：")]),t._v(" "),e("p",[e("strong",[t._v("1. platforms/web/runtime/index")])]),t._v(" "),e("ul",[e("li",[t._v("主要定义了web平台专属的方法，包括全局的Vue.config，Vue.prototype的mount、patch等等")]),t._v(" "),e("li",[t._v("定义了 public mount method ，也就是不带compiler的"),e("code",[t._v("Vue.prototype.$mount")]),t._v("，调用"),e("code",[t._v("mountComponent")]),t._v("完成组件的挂载")])]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("2. core/index")])]),t._v(" "),e("ul",[e("li",[e("code",[t._v("initGlobalAPI(Vue)")])])]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("3. core/instance/index")])]),t._v(" "),e("ul",[e("li",[t._v("原始定义 "),e("code",[t._v("function Vue (options)")]),t._v(" ，其中会调用初始化方法 "),e("code",[t._v("this._init(options)")])]),t._v(" "),e("li",[e("u",[t._v("initMixin(Vue)")]),t._v(" "),e("ul",[e("li",[t._v("定义 "),e("code",[t._v("Vue.prototype._init")])]),t._v(" "),e("li",[t._v("mergeOptions、init初始化、vm.$mount挂载组件")])])]),t._v(" "),e("li",[t._v("stateMixin(Vue)")]),t._v(" "),e("li",[t._v("eventsMixin(Vue)")]),t._v(" "),e("li",[t._v("lifecycleMixin(Vue)")]),t._v(" "),e("li",[t._v("renderMixin(Vue)")])]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"图例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图例"}},[t._v("#")]),t._v(" 图例")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wangtunan.github.io/blog/assets/img/process.8f86c136.png",alt:""}})]),t._v(" "),e("p",[t._v("来源："),e("a",{attrs:{href:"https://wangtunan.github.io/blog/vueAnalysis/entry/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://wangtunan.github.io/blog/vueAnalysis/entry/"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),e("h3",{attrs:{id:"_1-vue是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue是什么"}},[t._v("#")]),t._v(" 1. Vue是什么？")]),t._v(" "),e("p",[t._v("答：Vue本质上就是通过function实现的Class类，然后扩展了自身和原型prototype上的属性和方法。不用ES6是因为，用ES5扩展原型的方式更方便将功能划分不同的文件模块，更清晰也更方便代码的维护管理。")]),t._v(" "),e("h3",{attrs:{id:"_2-new-vue-发生了什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-new-vue-发生了什么"}},[t._v("#")]),t._v(" 2. new Vue 发生了什么？")]),t._v(" "),e("p",[t._v("答：Vue构造函数只能通过new关键字调用，然后会去调用 "),e("code",[t._v("this._init(options)")]),t._v(" 方法完成初始化。实例的init方法被定义在initMixin中，主要做了merge options、相关属性的init初始化、以及通过vm.$mount挂载实例这三件事。")]),t._v(" "),e("p",[e("strong",[t._v("延伸")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("init初始化中的merge options")]),t._v(" "),e("p",[t._v("需要区分实例化的是component还是Vue，")]),t._v(" "),e("ul",[e("li",[t._v("前者调用 "),e("code",[t._v("initInternalComponent")]),t._v(" 只需要做简单的赋值拷贝，而不涉及递归与合并策略等复杂逻辑，从而使实例化的速度快很多（optimize internal component instantiation）")]),t._v(" "),e("li",[t._v("后者使用 "),e("code",[t._v("mergeOptions")]),t._v(" 方法，同时在 "),e("code",[t._v("resolveConstructorOptions")]),t._v(" 中还需要进一步细分是通过new Vue或者是Vue.extend的方式来引入的额外options，如果是extend则需要继承父类的options，同时根据缓存的options判断是否需要更新父类的options，因为它有可能也会被mixin或extend的方式改变。")])])]),t._v(" "),e("li",[e("p",[t._v("相关属性的init初始化")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initProxy")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// render的Proxy代理【TODO: 理清过程】")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vm._renderProxy = new Proxy(vm, handlers)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vnode = render.call(vm._renderProxy, vm.$createElement)    [Vue.prototype._render()]")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initLifecycle")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initEvents")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initRender")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'beforeCreate'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initInjections")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// resolve injections before data/props")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initState")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("initProvide")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// resolve provide after data/props")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callHook")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'created'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// --------------------------------------------")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("$mount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("ul",[e("li",[t._v("init留意两个分割点，'beforeCreate'、 'created'，结合生命周期图例来看。")]),t._v(" "),e("li",[t._v("initState中初始化的顺序依次是：props、methods、data、computed、watch，这对后面的响应式分析很有帮助。")])])]),t._v(" "),e("li",[e("p",[t._v("vm.$mount挂载实例")]),t._v(" "),e("p",[t._v("会判断 vm.$options.el 是否存在，存在则 "),e("code",[t._v("vm.$mount(vm.$options.el)")]),t._v(" ，然后会去调用入口文件中 $mount 方法，通过compiler和render，将template渲染成实际的DOM，完成vm实例的挂载。")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);