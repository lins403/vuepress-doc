(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{410:function(t,e,a){"use strict";a.r(e);var r=a(43),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-特性"}},[t._v("#")]),t._v(" Git 特性")]),t._v(" "),a("h2",{attrs:{id:"一、版本管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、版本管理"}},[t._v("#")]),t._v(" 一、版本管理")]),t._v(" "),a("p",[t._v("代码集中化管理，记录文件所有历史变化，支持多人团队协作开发")]),t._v(" "),a("h3",{attrs:{id:"集中式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集中式"}},[t._v("#")]),t._v(" 集中式")]),t._v(" "),a("ul",[a("li",[t._v("版本库集中存放在中央服务器，工作前要先从服务器拉取最新版本，结束时再把自己干的活推送给服务器")]),t._v(" "),a("li",[t._v("单点故障；必须联网，无法单机工作")]),t._v(" "),a("li",[t._v("SVN、CVS")])]),t._v(" "),a("h3",{attrs:{id:"分布式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式"}},[t._v("#")]),t._v(" 分布式")]),t._v(" "),a("ul",[a("li",[t._v("每个人的电脑上都是一个完整的版本库，客户端保存的是完整的代码仓库镜像，而非快照")]),t._v(" "),a("li",[t._v("可以离线工作，大部分操作在本地执行")]),t._v(" "),a("li",[t._v("安全性高，速度快")])]),t._v(" "),a("h2",{attrs:{id:"二、workflow工作流"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、workflow工作流"}},[t._v("#")]),t._v(" 二、workflow工作流")]),t._v(" "),a("p",[t._v("工作流，即分支管理策略，制定分支模型，更好的管理版本迭代、版本发布等")]),t._v(" "),a("h3",{attrs:{id:"_1-git-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-flow"}},[t._v("#")]),t._v(" 1. Git Flow")]),t._v(" "),a("ul",[a("li",[t._v("长期分支：master、dev")]),t._v(" "),a("li",[t._v("阶段辅助分支：功能 feature、补丁 hotfix 、预发 release")]),t._v(" "),a("li",[t._v("版本记录：通过 master 上的 tag 来记录")])]),t._v(" "),a("h3",{attrs:{id:"_2-github-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-github-flow"}},[t._v("#")]),t._v(" 2. GitHub Flow")]),t._v(" "),a("ul",[a("li",[t._v("长期分支：master，protected，提交权限比较严格，永远是可发布状态")])]),t._v(" "),a("h3",{attrs:{id:"_3-gitlab-flow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-gitlab-flow"}},[t._v("#")]),t._v(" 3. GitLab Flow")]),t._v(" "),a("ul",[a("li",[t._v("Environment Branches，每个环境，都对应一个分支。prodution 分支专门用来发布版本，pre-production预发、test-production测试。")]),t._v(" "),a("li",[t._v("Upstream First。代码合并的顺序，要按环境依次推送，确保代码被充分测试过，才会从上游分支合并到下游分支。")])]),t._v(" "),a("h2",{attrs:{id:"三、head、工作树、索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、head、工作树、索引"}},[t._v("#")]),t._v(" 三、HEAD、工作树、索引")]),t._v(" "),a("p",[t._v("打开 "),a("code",[t._v(".git")]),t._v(" 文件来看")]),t._v(" "),a("h3",{attrs:{id:"head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),a("blockquote",[a("p",[t._v("ref: refs/heads/branch_name")]),t._v(" "),a("blockquote",[a("p",[t._v("指向 "),a("code",[t._v(".git/refs/heads/branch_name")]),t._v(" ，其中保存了最新的提交即 commitId")])]),t._v(" "),a("p",[t._v("HEAD指针 => 分支指针 => 最新提交")])]),t._v(" "),a("h4",{attrs:{id:"detached-head"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#detached-head"}},[t._v("#")]),t._v(" detached head")]),t._v(" "),a("p",[t._v("如果使用的是 "),a("code",[t._v("git checkout < commit id>")]),t._v("，即切换到指定的某一次提交，HEAD 就会处于 detached 状态（游离状态）")]),t._v(" "),a("p",[t._v("detached 状态有利有弊，可以作临时分支，保存临时状态等，还是谨慎使用，及时切回其他分支HEAD。")]),t._v(" "),a("h3",{attrs:{id:"工作树-索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作树-索引"}},[t._v("#")]),t._v(" 工作树 & 索引")]),t._v(" "),a("p",[t._v("工作树（workspace，工作区）、索引（index，暂存区 / staging area）")]),t._v(" "),a("p",[t._v("在数据库和工作树之间有索引，索引是为了向数据库提交作准备的区域，也被称为暂存区域。")]),t._v(" "),a("ol",[a("li",[t._v("the "),a("strong",[t._v("workspace")]),t._v(" is the directory tree of (source) files that you see and edit.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("index")]),t._v(" is a single, large, binary file in "),a("code",[t._v("<baseOfRepo>/.git/index")]),t._v(", which lists all files in the current branch, their "),a("em",[t._v("sha1")]),t._v(" checksums, time stamps and the file name -- it is not another directory with a copy of files in it.")]),t._v(" "),a("li",[t._v("The "),a("strong",[t._v("local repository")]),t._v(" is a hidden directory ("),a("code",[t._v(".git")]),t._v(") including an "),a("code",[t._v("objects")]),t._v(' directory containing all versions of every file in the repo (local branches and copies of remote branches) as a compressed "blob" file.')])]),t._v(" "),a("h2",{attrs:{id:"延伸问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延伸问题"}},[t._v("#")]),t._v(" 延伸问题")]),t._v(" "),a("h3",{attrs:{id:"git-中-head、工作树和索引之间的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-中-head、工作树和索引之间的区别"}},[t._v("#")]),t._v(" Git 中 HEAD、工作树和索引之间的区别？")]),t._v(" "),a("p",[t._v("答：HEAD指针指向分支指针，分支指针指向最新提交。工作树相当于文件目录树，工作区的修改可能不需要全部提交，就需要通过暂存区，即中间的索引来指定要提交的文件。对开发者而言，暂存区也可以被用于校验错误，便于恢复代码状态。")]),t._v(" "),a("h1",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/896202780297248",target:"_blank",rel:"noopener noreferrer"}},[t._v("集中式vs分布式--廖雪峰"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/qq_32452623/article/details/78905181",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git三大特色之WorkFlow(工作流)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/3689838/whats-the-difference-between-head-working-tree-and-index-in-git",target:"_blank",rel:"noopener noreferrer"}},[t._v("What's the difference between HEAD, working tree and index, in Git?"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);