(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{484:function(t,e,r){"use strict";r.r(e);var a=r(43),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"leetcode经典题目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#leetcode经典题目"}},[t._v("#")]),t._v(" LeetCode经典题目")]),t._v(" "),r("h2",{attrs:{id:"数据结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),r("h3",{attrs:{id:"链表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#链表"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("21. 合并两个有序链表"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("23. 合并K个升序链表"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"树"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/solution/yi-tao-quan-fa-shua-diao-nge-bian-li-shu-de-wen--3/",target:"_blank",rel:"noopener noreferrer"}},[t._v("一套拳法👊刷掉n个遍历树的问题"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[t._v("无脑使用递归，或者是利用栈的方式实现迭代")]),t._v(" "),r("li",[t._v("回溯动规分治等等，只要涉及递归的问题，都是树的问题。")]),t._v(" "),r("li",[t._v("回溯算法就是个 N 叉树的前后序遍历问题")])]),t._v(" "),r("h4",{attrs:{id:"二叉堆"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二叉堆"}},[t._v("#")]),t._v(" 二叉堆")]),t._v(" "),r("p",[t._v("二叉堆在逻辑上其实是一种特殊的二叉树（完全二叉树），只不过存储在数组里，我们把数组索引作为指针。")]),t._v(" "),r("p",[t._v("二叉堆还分为最大堆和最小堆。")]),t._v(" "),r("ul",[r("li",[t._v("最大堆的性质是：每个节点都大于等于它的两个子节点。")]),t._v(" "),r("li",[t._v("最小堆的性质是：每个节点都小于等于它的子节点。")])]),t._v(" "),r("p",[t._v("应用：实现优先级队列（插入或者删除元素的时候，元素会自动排序）")]),t._v(" "),r("h3",{attrs:{id:"多维数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[t._v("#")]),t._v(" 多维数组")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/reshape-the-matrix/",target:"_blank",rel:"noopener noreferrer"}},[t._v("566. 重塑矩阵"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/pascals-triangle/",target:"_blank",rel:"noopener noreferrer"}},[t._v("118. 杨辉三角"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),r("h4",{attrs:{id:"优先队列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优先队列"}},[t._v("#")]),t._v(" 优先队列")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/circle/discuss/aVs6F0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("使用js刷题中的提示开启es6特性和使用priority-queue"),r("OutboundLink")],1)]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("23. 合并K个升序链表"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),r("h3",{attrs:{id:"二分法-logn"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二分法-logn"}},[t._v("#")]),t._v(" 二分法（logN）")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"}},[t._v("35. 搜索插入位置"),r("OutboundLink")],1)]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用位运算符>>>做整除，优先级低于+-")]),t._v("\nmid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" left "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// or")]),t._v("\nmid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("right "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" left "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" left\n")])])]),r("h3",{attrs:{id:"双指针"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#双指针"}},[t._v("#")]),t._v(" 双指针")]),t._v(" "),r("p",[t._v("逆向：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"}},[t._v("167. 两数之和 II - 输入有序数组"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("350. 两个数组的交集 II"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("快慢指针：")]),t._v(" "),r("ul",[r("li",[r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/move-zeroes/",target:"_blank",rel:"noopener noreferrer"}},[t._v("283. 移动零"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/middle-of-the-linked-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("876. 链表的中间结点"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"}},[t._v("19. 删除链表的倒数第 N 个结点"),r("OutboundLink")],1)])])]),t._v(" "),r("p",[r("strong",[t._v("滑动窗口")]),t._v("：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-window-substring/",target:"_blank",rel:"noopener noreferrer"}},[t._v("76. 最小覆盖子串"),r("OutboundLink")],1)])]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("s"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("j"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("j"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 循环变量的自增/自减放在循环体中执行速度更快一些")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("s"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("s"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("s"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("j"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("s"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\t\t"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 解构赋值的方式--交换两个值")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),r("h3",{attrs:{id:"动态规划"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"}},[t._v("121. 买卖股票的最佳时机"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"综合多解题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#综合多解题"}},[t._v("#")]),t._v(" 综合多解题")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[t._v("53. 最大子数组和"),r("OutboundLink")],1),t._v("【贪心、动态规划、分治法】")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("23. 合并K个升序链表"),r("OutboundLink")],1),t._v("【优先队列、分治】")]),t._v(" "),r("h2",{attrs:{id:"其它"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其它"}},[t._v("#")]),t._v(" 其它")]),t._v(" "),r("p",[t._v("循环余数")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/rotate-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("189. 轮转数组"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("位运算")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"}},[t._v("191. 位1的个数"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("一但要求下一个更大的元素，就是用单调栈解。")]),t._v(" "),r("p",[t._v("原地变换，或者在这个空间内求某个确定条件的情况，可以考虑使用哈希表")]),t._v(" "),r("p",[t._v("遍历")]),t._v(" "),r("ul",[r("li",[t._v("迭代")]),t._v(" "),r("li",[t._v("递归")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);