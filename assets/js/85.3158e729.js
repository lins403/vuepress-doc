(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{487:function(v,_,a){"use strict";a.r(_);var t=a(43),l=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[v._v("#")]),v._v(" 树")]),v._v(" "),a("h2",{attrs:{id:"术语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#术语"}},[v._v("#")]),v._v(" 术语")]),v._v(" "),a("ul",[a("li",[v._v("度：树中一个结点的孩子个数称为该结点的度，树中结点的最大度数称为树的度")]),v._v(" "),a("li",[v._v("分支结点（非终端结点，度大于0）、叶子结点（终端结点，度等于0）")]),v._v(" "),a("li",[v._v("有序树、无序树。树中结点的各子树从左到右是有次序的，不能互换")]),v._v(" "),a("li",[v._v("结点的"),a("strong",[v._v("深度")]),v._v("是自顶向下逐层累加，"),a("strong",[v._v("高度")]),v._v("是自底向上")])]),v._v(" "),a("p",[v._v("树可以认为是一种特殊的图")]),v._v(" "),a("h2",{attrs:{id:"二叉树-binary-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二叉树-binary-tree"}},[v._v("#")]),v._v(" 二叉树（Binary Tree）")]),v._v(" "),a("ul",[a("li",[v._v("每个结点至多只有两棵子树")]),v._v(" "),a("li",[v._v("有序树，需确定其左右次序")])]),v._v(" "),a("h4",{attrs:{id:"特殊的二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊的二叉树"}},[v._v("#")]),v._v(" 特殊的二叉树")]),v._v(" "),a("ol",[a("li",[a("p",[v._v("满二叉树")])]),v._v(" "),a("li",[a("p",[v._v("完全二叉树")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边")])]),v._v(" "),a("li",[a("p",[v._v("就是对应相同高度的满二叉树缺失最下层最右边的一些连续叶子结点")])])])]),v._v(" "),a("li",[a("p",[a("strong",[v._v("二叉排序树")])]),v._v(" "),a("ul",[a("li",[v._v("左子树上所有结点的关键字均小于根节点的关键字，右子树均大于")])])]),v._v(" "),a("li",[a("p",[v._v("平衡二叉树")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("树上任一结点的左子树和右子树的深度之差不超过1")])]),v._v(" "),a("li",[a("p",[v._v("当节点数目一定，保持树的左右两端保持平衡，树的查找效率最高")])])])])]),v._v(" "),a("h3",{attrs:{id:"存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储结构"}},[v._v("#")]),v._v(" 存储结构")]),v._v(" "),a("h4",{attrs:{id:"顺序存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#顺序存储"}},[v._v("#")]),v._v(" 顺序存储")]),v._v(" "),a("ul",[a("li",[v._v("完全二叉树和满二叉树适用")]),v._v(" "),a("li",[v._v("一般二叉树，使用顺序存储需要添加一些并不存在的空结点来与完全二叉树相对照，空间利用率较低")])]),v._v(" "),a("h4",{attrs:{id:"链式存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式存储"}},[v._v("#")]),v._v(" 链式存储")]),v._v(" "),a("ul",[a("li",[v._v("结点结构通常包含若干数据域和若干指针域")]),v._v(" "),a("li",[v._v("二叉链表至少包含3个域：数据域data，左指针域lchild，右指针域rchild")])]),v._v(" "),a("h3",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历"}},[v._v("#")]),v._v(" 遍历")]),v._v(" "),a("p",[v._v("遍历Traversal，根结点N，左子树L，右子树R")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("先序/前序遍历（NLR）")])]),v._v(" "),a("li",[a("p",[v._v("中序遍历（LNR）")])]),v._v(" "),a("li",[a("p",[v._v("后序遍历（LRN）")])]),v._v(" "),a("li",[a("p",[v._v("递归算法和非递归算法的转换")]),v._v(" "),a("ul",[a("li",[v._v("从递归执行过程的角度看，三种遍历方法完全相同")]),v._v(" "),a("li",[v._v("非递归算法")])])]),v._v(" "),a("li",[a("p",[v._v("层次遍历")]),v._v(" "),a("ul",[a("li",[v._v("逐层遍历，需要借助一个队列")])])])]),v._v(" "),a("h3",{attrs:{id:"线索二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线索二叉树"}},[v._v("#")]),v._v(" 线索二叉树")]),v._v(" "),a("ul",[a("li",[v._v("线索：指向节点的前驱和后继的指针")]),v._v(" "),a("li",[v._v("当我们希望得到二叉树中某一个结点的前驱或者后继结点时，普通的二叉树是无法直接得到的，只能通过遍历一次二叉树得到。每当涉及到求解前驱或者后继就需要将二叉树遍历一次，非常不方便。")]),v._v(" "),a("li",[v._v("二叉树的线索化，是将二叉链表中的空指针改为指向前驱或后继的线索，引入线索二叉树正是为了加快查找结点前趋和后继的速度。")]),v._v(" "),a("li",[v._v("而前驱和后继的信息只有在遍历时才能得到，因此线索化的实质就是遍历一次二叉树")])]),v._v(" "),a("h2",{attrs:{id:"树和森林"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和森林"}},[v._v("#")]),v._v(" 树和森林")]),v._v(" "),a("h3",{attrs:{id:"树的存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树的存储结构"}},[v._v("#")]),v._v(" 树的存储结构")]),v._v(" "),a("ul",[a("li",[v._v("双亲表示法\n"),a("ul",[a("li",[v._v("连续空间，每个结点增设一个伪指针，指示其双亲结点在数组中的位置")])])]),v._v(" "),a("li",[v._v("孩子表示法\n"),a("ul",[a("li",[v._v("每个结点的孩子结点都用单链表链接起来形成一个线性结构，此时n个结点就有n个孩子链表")])])]),v._v(" "),a("li",[v._v("孩子兄弟表示法\n"),a("ul",[a("li",[v._v("又称二叉树表示法，即以二叉链表作为树的存储结构")])])])]),v._v(" "),a("p",[v._v("与二叉树的转换")]),v._v(" "),a("h3",{attrs:{id:"树和森林的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树和森林的遍历"}},[v._v("#")]),v._v(" 树和森林的遍历")]),v._v(" "),a("p",[v._v("树")]),v._v(" "),a("ul",[a("li",[v._v("先根遍历")]),v._v(" "),a("li",[v._v("后根遍历")]),v._v(" "),a("li",[v._v("层次遍历")])]),v._v(" "),a("p",[v._v("森林")]),v._v(" "),a("ul",[a("li",[v._v("先序遍历")]),v._v(" "),a("li",[v._v("中序遍历")])]),v._v(" "),a("h2",{attrs:{id:"树与二叉树的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树与二叉树的应用"}},[v._v("#")]),v._v(" 树与二叉树的应用")]),v._v(" "),a("ul",[a("li",[v._v("二叉排序树（BST，二叉搜索树、二叉查找树）")]),v._v(" "),a("li",[v._v("平衡二叉树")]),v._v(" "),a("li",[v._v("哈弗曼树和哈夫曼编码\n"),a("ul",[a("li",[v._v("给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度（WPL）达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)")]),v._v(" "),a("li",[v._v("哈夫曼编码\n"),a("ul",[a("li",[v._v("在数据通信中，若对每个字符用相等长度的二进制位表示，称这种编码方式为固定长度编码。若允许对不同字符用不等长的二进制位表示，则这种编码方式称为可变长度编码。")]),v._v(" "),a("li",[v._v("可变长度编码比固定长度编码要好得多，其特点是对频率高的字符赋以短编码，而对频率较低的字符则赋以较长一些的编码，从而可以使字符的平均编码长度减短，起到压缩数据的效果。")]),v._v(" "),a("li",[v._v("哈夫曼编码是一种被广泛应用而且非常有效的数据压缩编码。")])])])])])])])}),[],!1,null,null,null);_.default=l.exports}}]);