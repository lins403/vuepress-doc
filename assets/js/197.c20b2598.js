(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{596:function(t,e,n){"use strict";n.r(e);var a=n(43),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"组件化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),n("p",[n("code",[t._v("vm.$mount")]),t._v(" ---\x3e mountComponent")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("vm._render")]),t._v(" ---\x3e render\n"),n("ul",[n("li",[n("code",[t._v("vm.$createElement")]),t._v(" ---\x3e createElement ---\x3e createComponent ---\x3e new VNode")])])]),t._v(" "),n("li",[n("code",[t._v("vm._update")]),t._v(" ---\x3e "),n("code",[t._v("vm.__patch__")]),t._v(" ---\x3e "),n("code",[t._v("createElm")]),t._v(" ---\x3e "),n("code",[t._v("createComponent")]),t._v(" ---\x3e createChildren")])]),t._v(" "),n("h2",{attrs:{id:"文档内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文档内容"}},[t._v("#")]),t._v(" 文档内容")]),t._v(" "),n("ol",[n("li",[t._v("组件基础")]),t._v(" "),n("li",[t._v("组件注册")]),t._v(" "),n("li",[t._v("Props")]),t._v(" "),n("li",[t._v("自定义事件")]),t._v(" "),n("li",[t._v("插槽")]),t._v(" "),n("li",[t._v("动态组件&异步组件")]),t._v(" "),n("li",[t._v("处理边界情况")])]),t._v(" "),n("h2",{attrs:{id:"mountcomponent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mountcomponent"}},[t._v("#")]),t._v(" mountComponent")]),t._v(" "),n("p",[n("code",[t._v("mountComponent")]),t._v(" 核心就是先实例化一个"),n("code",[t._v("render Watcher")]),t._v("，在它的回调函数中会调用 "),n("code",[t._v("updateComponent")]),t._v(" 方法，在此方法中调用 "),n("code",[t._v("vm._render")]),t._v(" 方法先生成 "),n("code",[t._v("VNode")]),t._v("，最终调用 "),n("code",[t._v("vm._update")]),t._v(" 更新 DOM。")]),t._v(" "),n("ul",[n("li",[t._v("vm._render ---\x3e "),n("code",[t._v("createElement")]),t._v(" ---\x3e "),n("code",[t._v("createComponent")])]),t._v(" "),n("li",[t._v("vm._update ---\x3e "),n("code",[t._v("vm.__patch__")]),t._v(" ---\x3e "),n("code",[t._v("createElm")]),t._v(" ---\x3e "),n("code",[t._v("createComponent")]),t._v(" ---\x3e createChildren")])]),t._v(" "),n("h2",{attrs:{id:"生成vnode的createcomponent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生成vnode的createcomponent"}},[t._v("#")]),t._v(" 生成vnode的createComponent")]),t._v(" "),n("p",[t._v("在 "),n("code",[t._v("render")]),t._v(" 阶段，如果是一个组件节点，则通过 "),n("code",[t._v("createComponent")]),t._v(" 创建一个组件 "),n("code",[t._v("vnode")])]),t._v(" "),n("p",[t._v("createElement根据render function创建vnode时，如果碰上组件节点，则会调用createComponent来创建和构造组件，最终生成 "),n("mark",[t._v("placeholder vnode")]),t._v("（组件vnode/占位符vnode）。")]),t._v(" "),n("ol",[n("li",[t._v("使用 "),n("code",[t._v("Vue.extend")]),t._v(" 构造子类构造函数（组件初始化的时候是不传 el 的，因此组件是自己接管了 "),n("code",[t._v("$mount")]),t._v(" 的过程）")]),t._v(" "),n("li",[n("code",[t._v("installComponentHooks")]),t._v(" 安装组件钩子函数")]),t._v(" "),n("li",[t._v("new 实例化 "),n("code",[t._v("vnode")]),t._v("，生成 placeholder vnode")])]),t._v(" "),n("h2",{attrs:{id:"createelm中调用的createcomponent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#createelm中调用的createcomponent"}},[t._v("#")]),t._v(" createElm中调用的createComponent")]),t._v(" "),n("p",[t._v("组件的 "),n("code",[t._v("patch")]),t._v(" 过程中，会执行"),n("code",[t._v("createElm")]),t._v("方法来创建节点，其中会调用 createComponent 来创建和初始化子组件，与render function的 createComponent 方法不是同一个。")]),t._v(" "),n("p",[t._v("createElm中调用的"),n("code",[t._v("createComponent")]),t._v("方法")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** createComponent **/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("componentInstance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("initComponent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[n("p",[t._v("初始化组件，然后调用"),n("code",[t._v("vm.$mount")]),t._v("进行挂载，调用"),n("code",[t._v("mountComponent")]),t._v("方法，进而执行"),n("code",[t._v("vm._render()")]),t._v("方法。然后会绑定父子关系。")]),t._v(" "),n("p",[t._v("子组件的 "),n("code",[t._v("init")]),t._v(" 时机是在父组件执行 "),n("code",[t._v("patch")]),t._v(" 过程的时候，那这个时候父组件已经编译完成了。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Vue.prototype._render **/")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set parent vnode. this allows render functions to have access to the data on the placeholder node.")]),t._v("\nvm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$vnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _parentVnode\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// set parent")]),t._v("\nvnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parent "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _parentVnode\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" vnode\n")])])])]),t._v(" "),n("li",[n("p",[t._v("返回的结果是判断组件的根节点是否是一个普通元素，如果不是，就会直接return，中断 createElm 创建和插入DOM的过程。")])])]),t._v(" "),n("h2",{attrs:{id:"createelm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#createelm"}},[t._v("#")]),t._v(" createElm")]),t._v(" "),n("p",[t._v("如果通过 createComponent 处理后，判断组件的根节点是一个普通元素，就会先创建一个父节点占位符，然后再遍历所有子 VNode 递归调用 "),n("code",[t._v("createElm")]),t._v("。")]),t._v(" "),n("p",[t._v("如果遇到子 VNode 是一个组件的 VNode，也就是发现子组件以后，则在createComponent中创建和初始化组件，将子组件vnode添加进之前的vnode队列中去，这样通过"),n("u",[t._v("不断递归调用createElm的方式就可以完整地构建了整个组件树")]),t._v("。")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** createElm **/")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tag "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个父节点占位符")]),t._v("\nvnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns\n  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElementNS")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ns"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//svg")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历所有子 VNode 递归调用 createElm")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChildren")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isDef")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("invokeCreateHooks")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//虚拟DOM的生命周期的create钩子")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refElm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//调用insertBefore或appendChild插入DOM")]),t._v("\n")])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createChildren")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'production'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkDuplicateKeys")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用 createElm")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElm")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" insertedVnodeQueue"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrimitive")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建元素节点并插入父节点中")]),t._v("\n    nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nodeOps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTextNode")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vnode"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("在完成组件的整个 "),n("code",[t._v("patch")]),t._v(" 过程后，最后执行 "),n("code",[t._v("insert(parentElm, vnode.elm, refElm)")]),t._v(" 完成组件的 DOM 插入，如果组件 "),n("code",[t._v("patch")]),t._v(" 过程中又创建了子组件，那么DOM 的插入顺序是先子后父。")]),t._v(" "),n("h2",{attrs:{id:"组件注册"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件注册"}},[t._v("#")]),t._v(" 组件注册")]),t._v(" "),n("p",[t._v("每个组件的创建都是通过 "),n("code",[t._v("Vue.extend")]),t._v(" 继承而来，然后将组件的 options 和全局构造函数 Vue 的 options 进行 merge 合并。")]),t._v(" "),n("p",[t._v("根组件和子组件的merge options的时机略有不同，根组件是在初始化时合并配置，子组件是在执行生成 vnode 的 "),n("code",[t._v("createComponent")]),t._v(" 方法中。")]),t._v(" "),n("p",[t._v("在 Vue.js 中，除了它内置的组件如 "),n("code",[t._v("keep-alive")]),t._v("、"),n("code",[t._v("component")]),t._v("、"),n("code",[t._v("transition")]),t._v("、"),n("code",[t._v("transition-group")]),t._v(" 等，其它用户自定义组件在使用前必须注册。")]),t._v(" "),n("h2",{attrs:{id:"问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[t._v("#")]),t._v(" 问题")]),t._v(" "),n("h3",{attrs:{id:"_1-为什么data必须是函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么data必须是函数"}},[t._v("#")]),t._v(" 1. 为什么data必须是函数？")]),t._v(" "),n("p",[t._v("答：因为组件可能被复用产生多个实例，如果一个组件的 "),n("code",[t._v("data")]),t._v(" 是一个函数，则每个实例的data对象就是互相独立的；如果不用函数而直接返回一个Object，会导致实例的data值是对这个对象的直接引用，修改其中一个实例的data就会引起联动。")]),t._v(" "),n("h3",{attrs:{id:"_2-为什么每个组件必须只有一个根元素"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么每个组件必须只有一个根元素"}},[t._v("#")]),t._v(" 2. 为什么每个组件必须只有一个根元素？")]),t._v(" "),n("blockquote",[n("p",[t._v("Render function should return a single root node.")])]),t._v(" "),n("p",[t._v("因为"),n("code",[t._v("<template>")]),t._v("的内容将替换掉实例的挂载元素（el）")]),t._v(" "),n("h3",{attrs:{id:"_3-节点命名空间"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-节点命名空间"}},[t._v("#")]),t._v(" 3. 节点命名空间")]),t._v(" "),n("p",[t._v("vnode的 "),n("code",[t._v("ns")]),t._v(" 是针对svg标签的属性，"),n("code",[t._v("Document.createElementNS()")]),t._v("创建命名空间")]),t._v(" "),n("h3",{attrs:{id:"_4-组件更新时什么时候更新dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-组件更新时什么时候更新dom"}},[t._v("#")]),t._v(" 4. 组件更新时什么时候更新DOM")]),t._v(" "),n("p",[t._v("会调用 virtual DOM 生命周期的钩子函数，钩子函数主要用于更新节点的属性(attributes)，然后调用浏览器的DOM api来更新DOM")]),t._v(" "),n("h3",{attrs:{id:"_5-placeholder怎么创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-placeholder怎么创建"}},[t._v("#")]),t._v(" 5. placeholder怎么创建")]),t._v(" "),n("p",[t._v("如果是 svg 标签，则调用"),n("code",[t._v("Document.createElementNS")]),t._v("创建命名空间节点，否则调用"),n("code",[t._v("Document.createElement")]),t._v("创建普通元素节点")]),t._v(" "),n("p",[t._v("以一个使用Vue-Router的工程项目为例，main.js是项目入口，在这里可以使用插件，或者自定义扩展全局方法。然后new Vue创建一个全局实例，将App.vue这个单文件组件作为渲染方法，然后将实例挂载到id为app的节点上。")]),t._v(" "),n("p",[t._v("App.vue中就是一个id为app的div容器，其中存放了"),n("code",[t._v("<router-view>")]),t._v("组件，用于根据当前路由，动态渲染对应的页面组件。")]),t._v(" "),n("p",[t._v("组件的创建无论是全局注册还是局部注册，都会去调用Vue.extend来构造子类构造函数。")]),t._v(" "),n("p",[t._v("根组件和子组件略有不同，根组件在初始化时合并options，完成一系列初始化后，将template编译为render function，执行render生成组件vnode，也叫占位符vnode，最后使用patch方法将vnode渲染为真实DOM。在根组件的render过程中，如果是普通元素节点，就直接生成vnode；如果碰上组件节点，则会调用createComponent来创建子组件，并安装组件钩子函数，最后生成子组件的vnode。在patch渲染vnode创建DOM的时候，将子组件vnode添加进之前根组件的vnode队列中去，不断递归调用createElm的方式来构建整个组件树，最后insert插入到真实DOM中去。")]),t._v(" "),n("p",[t._v("编译时发生在"),n("code",[t._v("vm.$mount")]),t._v("时，所以父组件先编译，然后再编译子组件。所以先触发父组件的beforeMount生命周期钩子。挂载的时候使用一个vnode队列来插入，所以顺序是反过来，子组件先完成挂载然后是父组件，先触发子组件的mounted生命周期钩子。")])])}),[],!1,null,null,null);e.default=s.exports}}]);